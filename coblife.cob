000100 IDENTIFICATION DIVISION.
000110 PROGRAM-ID. COBLIFE.
000120 AUTHOR. WAYNE MYERS.

000200 DATA DIVISION.
000205 WORKING-STORAGE SECTION.
000210 01 WS-WELCOME-MSG PIC X(20) VALUE 'Welcome To Coblife!'.
000215 01 WS-BLANK-MSG PIC X(1) VALUE ' '.
000220 01 WS-PROMPT-MSG PIC X(25) VALUE '[ENT] next [Q-ENT] quit: '.
000221 01 WS-GENERATION-MSG PIC X(12) VALUE 'Generation: '.
000225 01 WS-QUIT PIC 9(1) VALUE 0.
000230 01 WS-INPUT PIC X(1).
000235 01 WS-NCOUNT PIC 9(1) VALUE 0.
000240 01 WS-LIFE.
000241     05 WS-LX OCCURS 22 TIMES INDEXED BY X.
000242       10 WS-LY OCCURS 79 TIMES INDEXED BY Y.
000243         15 WS-ELEM PIC X(1) VALUE ' '.
000245 01 WS-LIFE-NG.
000246     05 WS-LNGX OCCURS 22 TIMES INDEXED BY I.
000247       10 WS-LNGY OCCURS 79 TIMES INDEXED BY J.
000248         15 WS-LN-ELEM PIC X(1) VALUE ' '.
000250 01 WS-LIFE-BOX.
000251     05 WS-BOXX OCCURS 3 TIMES INDEXED BY K.
000252       10 WS-BOXY OCCURS 3 TIMES INDEXED BY L.
000253         15 WS-BOX-ELEM PIC X(1) VALUE ' '.
000255* 01 X-TMP PIC 9(1).
000260* 01 Y-TMP PIC 9(1).
000265 01 WS-CURRENT-TIME.
000266     05 WS-CURRENT-HOUR    PIC 99.
000267     05 WS-CURRENT-MINUTE  PIC 99.
000268     05 WS-CURRENT-SECOND  PIC 99.
000269     05 WS-CURRENT-MS      PIC 99.
000270 01 WS-RANDOM-SEED PIC 9(8).
000280 01 WS-GENERATION  PIC 9(9) VALUE ZERO.

000300 PROCEDURE DIVISION.
000301* Main program loop
000305     PERFORM INIT-DATA-PARA.
000310     PERFORM WELCOME-PARA.
000330     PERFORM GAME-LOOP-PARA UNTIL WS-QUIT = 1.
000399 STOP RUN.

000410 INIT-DATA-PARA.
000411* Initialise our random seed and our game area
000415     PERFORM INIT-RANDOM-SEED-PARA.
000420     PERFORM IDX-PARA VARYING X FROM 1 BY 1 UNTIL X > 22.
000430 IDX-PARA.
000440     PERFORM IDY-PARA VARYING Y FROM 1 BY 1 UNTIL Y > 79.
000450 IDY-PARA.
000460     IF FUNCTION RANDOM > 0.7 THEN
000479       MOVE 'O' TO WS-LY(X, Y).

000500 WELCOME-PARA.
000501* Welcome the user to the game
000510     DISPLAY WS-WELCOME-MSG.
000520     DISPLAY WS-BLANK-MSG.
000530     PERFORM RESPONSE-PARA.

000610 GAME-LOOP-PARA.
000611* Main game loop
000620     PERFORM PRINT-PARA.
000630     PERFORM NEXT-GEN-PARA.
000635     PERFORM COPY-GEN-PARA.
000640     PERFORM RESPONSE-PARA.

000700 PRINT-PARA.
000701* Display the current state of the cellular automata
000705     DISPLAY WS-GENERATION-MSG WITH NO ADVANCING.
000706     DISPLAY WS-GENERATION.
000710     PERFORM X-PARA VARYING X FROM 1 BY 1 UNTIL X > 22.
000720 X-PARA.
000730     PERFORM Y-PARA VARYING Y FROM 1 BY 1 UNTIL Y > 79.
000735     DISPLAY WS-BLANK-MSG.
000740 Y-PARA.
000750     DISPLAY WS-LY(X, Y) WITH NO ADVANCING.

000800 NEXT-GEN-PARA.
000801* Calulate next generation of the cellular automata
000805     ADD 1 TO WS-GENERATION.
000810     PERFORM PROC-X-PARA VARYING X FROM 1 BY 1 UNTIL X > 22.
000821 PROC-X-PARA.
000830     PERFORM PROC-Y-PARA VARYING Y FROM 1 BY 1 UNTIL Y > 79.
000840 PROC-Y-PARA.
000850     MOVE 0 TO WS-NCOUNT.
000855     MOVE WS-LY(X, Y) TO WS-LNGY(X, Y).
000865     PERFORM BRUTE-COUNT-NEIGHBOURS-PARA.
000860*     PERFORM PROC-XBOX-PARA VARYING K FROM 1 BY 1 UNTIL K > 3.
000861*     DISPLAY "X: " X ", Y:" Y " Neighbour Count: " WS-NCOUNT.
000862     IF WS-LY(X, Y) = ' ' THEN
000863       IF WS-NCOUNT = 3 THEN
000864         MOVE 'O' TO WS-LNGY(X, Y)
000865       END-IF
000866     ELSE
000867       IF WS-NCOUNT < 2 OR WS-NCOUNT > 3 THEN
000868         MOVE ' ' TO WS-LNGY(X, Y).
000879* PROC-XBOX-PARA.
000880*     PERFORM PROC-YBOX-PARA VARYING L FROM 1 BY 1 UNTIL L > 3.
000890* PROC-YBOX-PARA.
000891*     COMPUTE X-TMP = (X + K - 2).
000892*     COMPUTE Y-TMP = (Y + L - 2).
000895*     DISPLAY "X: " X " Y: " Y WITH NO ADVANCING.
000896*     DISPLAY " X+K-2: " X-TMP " Y+L-2: " Y-TMP WITH NO ADVANCING.
000896*     DISPLAY " Neighbour: " WS-LY(X-TMP, Y-TMP).
000900*     IF NOT (K = 2 AND L = 2) THEN
000910*       IF WS-LY(X-TMP, Y-TMP) = 'O' THEN
000915*         DISPLAY "At X-TMP: " X-TMP ", Y-TMP: " Y-TMP " bleh"
000921*         ADD 1 TO WS-NCOUNT.

001000 COPY-GEN-PARA.
001005* Copy the newly calculated generation back to the original array
001010     PERFORM CG-X-PARA VARYING X FROM 1 BY 1 UNTIL X > 22.
001020 CG-X-PARA.
001030     PERFORM CG-Y-PARA VARYING Y FROM 1 BY 1 UNTIL Y > 79.
001040 CG-Y-PARA.
001050     MOVE WS-LNGY(X, Y) TO WS-LY(X, Y).

001100 RESPONSE-PARA.
001105* Utility function to get response from user
001110     DISPLAY WS-PROMPT-MSG WITH NO ADVANCING.
001120     ACCEPT WS-INPUT.
001130     IF WS-INPUT = "q" OR WS-INPUT = "Q" THEN
001140       MOVE 1 TO WS-QUIT.

001210 BRUTE-COUNT-NEIGHBOURS-PARA.
001215* Utility function (ugly) to count neighbours of an existing cell
001210     IF X > 1 AND Y > 1 AND WS-LY(X - 1, Y - 1) = 'O' THEN
001221       ADD 1 TO WS-NCOUNT.
001230     IF X > 1 AND WS-LY(X - 1, Y) = 'O' THEN
001240       ADD 1 TO WS-NCOUNT.
001250     IF X > 1 AND Y < 79 AND WS-LY(X - 1, Y + 1) = 'O' THEN
001260       ADD 1 TO WS-NCOUNT.
001279     IF Y > 1 AND WS-LY(X, Y - 1) = 'O' THEN
001280       ADD 1 TO WS-NCOUNT.
001290     IF Y < 79 AND WS-LY(X, Y + 1) = 'O' THEN
001300       ADD 1 TO WS-NCOUNT.
001310     IF X < 22 AND Y > 1 AND WS-LY(X + 1, Y - 1) = 'O' THEN
001321       ADD 1 TO WS-NCOUNT.
001330     IF X < 22 AND WS-LY(X + 1, Y) = 'O' THEN
001340       ADD 1 TO WS-NCOUNT.
001350     IF X < 22 AND Y < 79 AND WS-LY(X + 1, Y + 1) = 'O' THEN
001360       ADD 1 TO WS-NCOUNT.

001300 INIT-RANDOM-SEED-PARA.
001301* Utility function to initialise random seed
001305*    We don't need a hugely secure RNG, current time in ms is fine
001310     ACCEPT WS-CURRENT-TIME FROM TIME.
001320     COMPUTE WS-RANDOM-SEED =
001330                WS-CURRENT-MS
001331                + (WS-CURRENT-SECOND * 100)
001332                + (WS-CURRENT-MINUTE * 6000)
001333                + (WS-CURRENT-HOUR * 360000).
001340*    Now we have a seed we need to call RANDOM with it once.
001345*    COBOL doesn't seem to let us have throwaway statements so we
001346*    assign the result of RANDOM to the seed var itself.
001350     MOVE FUNCTION RANDOM(WS-RANDOM-SEED) TO WS-RANDOM-SEED.
